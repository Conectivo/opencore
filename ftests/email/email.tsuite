# This suite assumes you have Zope's MailHost sending mail to a mock smtp server
# implemented by https://github.com/ejucovy/mailsink -- which also provides
# a web UI for inspecting emails that are "sent."
# 
# The suite also assumes you are using a synchronous MailHost, or at least
# a MailDropHost with a very quick poll interval; it assumes that mails are
# sent out (and received in the mock smtp server's outbox) instantaneously.

reset_outbox

create_user
num_messages(n=1)
find_message_by_subject(subject="email_to_pending_user_subject")

reset_outbox

login
create_project(projpolicy="open_policy", projfeaturelets="listen")
project_invite
num_messages(n=1)
find_message_by_subject(subject=${invite_subject})

reset_outbox

project_remind
num_messages(n=1)
find_message_by_subject(subject="Please join us")

reset_outbox

# Now let's try some listen emails.
# First we'll send a regular email from a regular user.
# It should be put in the moderation queue.
sendmail(mailname="listen_post.email")

# The user who sent the email should get a confirmation email,
# and the moderator should get a moderation email.
num_messages(n=2)
find_message_by_subject(subject="Email confirmation")
find_message_by_subject(subject="Post requiring moderation")

reset_outbox

listen_mod_post_accept(postsubject="hi how are you")
num_messages(n=1)
find_message_by_subject(subject="hi how are you")

reset_outbox

# Now the same user (email address) will send a message
# with lots of non-ASCII characters. It should go through
# immediately because this email address is already an
# allowed sender.
sendmail(mailname="listen_post_i18n.email")
listen_check_for_post(postsubject="second message")
num_messages(n=1)
find_message_by_subject(subject="second message")

reset_outbox

# Now a new user will send a message with lots of non-ASCII
# characters.  It should go through the confirmation workflow
# and the moderator should be able to accept it through the web.
sendmail(mailname="listen_mod_i18n.email")

num_messages(n=2)
find_message_by_subject(subject="Email confirmation")
find_message_by_subject(subject="Post requiring moderation")

reset_outbox

listen_mod_post_accept(postsubject="third message")
num_messages(n=1)
find_message_by_subject(subject="third message")

reset_outbox

# Now yet another new user will send a regular message to the list.
# He'll then reply by email to the confirmation prompt,
# and the message should then get processed, sent and archived.
sendmail(mailname="another_listen_post.email")

num_messages(n=2)

open_message(subject="Email confirmation")
reply(text="subscribe")

num_messages(n=3)

open_message(subject="i love this list")
listen_check_for_post(postsubject="i love this list")

reset_outbox
