#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: openplans_team_membership_workflow/OpenPlans Team Membership Workflow
# Date: 2006/04/26 20:13:24.466 GMT-7
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
#
"""
Programmatically create a workflow type.
"""
__version__ = "$Id: dumpDCWorkflow.py 20757 2006-03-12 23:02:15Z encolpe $"

from Products.CMFCore.WorkflowTool import addWorkflowFactory
from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
from Products.PythonScripts.PythonScript import PythonScript
from Products.ExternalMethod.ExternalMethod import ExternalMethod

def setup_openplans_team_membership_workflow(wf):
    """Setup the workflow
    """
    wf.setProperties(title='OpenPlans Team Membership Workflow')

    for s in ('committed', 'inactive', 'pending'):
        wf.states.addState(s)
    for t in ('activate', 'deactivate'):
        wf.transitions.addTransition(t)
    for v in ('action', 'actor', 'comments', 'review_history', 'time'):
        wf.variables.addVariable(v)
    for l in ('reviewer_queue',):
        wf.worklists.addWorklist(l)
    for p in ('Access contents information',
              'Modify portal content',
              'View',
              'List folder contents'):
        wf.addManagedPermission(p)

    # Initial State
    wf.states.setInitialState('committed')

    # State Initialization
    sdef = wf.states['committed']
    sdef.setProperties(title='Active',
                       description='',
                       transitions=('deactivate',))
    sdef.setPermission('Access contents information', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Anonymous',
                       'Authenticated',
                       'Manager',
                       'Member',
                       'Owner',
                       'ProjectAdmin',
                       'ProjectContentMgr',
                       'ProjectMember',
                       'Reviewer'])
    sdef.setPermission('List folder contents', 0,
                       ['Manager', 'ProjectAdmin'])

    sdef = wf.states['inactive']
    sdef.setProperties(title='Inactive',
                       description='',
                       transitions=('activate',))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('List folder contents', 0,
                       ['Manager', 'ProjectAdmin'])

    sdef = wf.states['pending']
    sdef.setProperties(title='Pending Approval',
                       description='',
                       transitions=('activate', 'deactivate'))
    sdef.setPermission('Access contents information', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'ProjectAdmin'])
    sdef.setPermission('View', 0,
                       ['Manager', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('List folder contents', 0,
                       ['Manager', 'ProjectAdmin'])

    # Transition Initialization
    tdef = wf.transitions['activate']
    tdef.setProperties(title='Membership become Active',
                       description='',
                       new_state_id='committed',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Activate',
                       actbox_url='%(content_url)s/content_publish_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'TeamSpace: Manage team memberships'},
                       )

    tdef = wf.transitions['deactivate']
    tdef.setProperties(title='Membership is Made Inactive',
                       description='',
                       new_state_id='inactive',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Deactivate',
                       actbox_url='%(content_url)s/content_retract_form',
                       actbox_category='workflow',
                       props={'guard_permissions': 'TeamSpace: Manage team memberships'},
                       )

    # State Variable
    wf.variables.setStateVar('review_state')

    # Variable Initialization
    vdef = wf.variables['action']
    vdef.setProperties(description='The last transition',
                       default_value='',
                       default_expr='transition/getId|nothing',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['actor']
    vdef.setProperties(description='The ID of the user who performed the last transition',
                       default_value='',
                       default_expr='user/getId',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description='Comments about the last transition',
                       default_value='',
                       default_expr="python:state_change.kwargs.get('comment', '')",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description='Provides access to workflow history',
                       default_value='',
                       default_expr='state_change/getHistory',
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['time']
    vdef.setProperties(description='Time of the last transition',
                       default_value='',
                       default_expr='state_change/getDateTime',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    # Worklist Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description='Reviewer tasks',
                       actbox_name='Pending (%(count)d)',
                       actbox_url='%(portal_url)s/search?review_state=pending',
                       actbox_category='global',
                       props={'guard_permissions': 'Review portal content',
                              'var_match_review_state': 'pending'})

def create_openplans_team_membership_workflow(id):
    """Create, setup and return the workflow.
    """
    ob = DCWorkflowDefinition(id)
    setup_openplans_team_membership_workflow(ob)
    return ob

addWorkflowFactory(create_openplans_team_membership_workflow,
                   id='openplans_team_membership_workflow',
                   title='OpenPlans Team Membership Workflow')
