# 
#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: openplans_team_workflow/OpenPlans Team Workflow
# Date: 2005/07/30 16:38:02.709 GMT-7
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# No script detected in this workflow
# 
"""
Programmatically creates a workflow type
"""
__version__ = "$Revision: 1.1.1.1 $"[11:-2]

from Products.CMFCore.WorkflowTool import addWorkflowFactory

from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition

def setupOpenplans_team_workflow(wf):
    "..."
    wf.setProperties(title='OpenPlans Team Workflow')

    for s in ['team_visible', 'visible', 'private']:
        wf.states.addState(s)
    for t in ['team', 'hide', 'show']:
        wf.transitions.addTransition(t)
    for v in ['action', 'review_history', 'actor', 'comments', 'time']:
        wf.variables.addVariable(v)
    for l in ['reviewer_queue']:
        wf.worklists.addWorklist(l)
    for p in ('Access contents information', 'Modify portal content', 'View', 'Delete objects', 'TeamSpace: Manage team memberships'):
        wf.addManagedPermission(p)
        

    ## Initial State
    wf.states.setInitialState('visible')

    ## States initialization
    sdef = wf.states['team_visible']
    sdef.setProperties(title="""Visible only to team members""",
                       transitions=('hide', 'show'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('TeamSpace: Manage team memberships', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])

    sdef = wf.states['visible']
    sdef.setProperties(title="""Visible but not published""",
                       transitions=('hide', 'team'))
    sdef.setPermission('Access contents information', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('View', 0, ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'ProjectMember', 'Reviewer'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('TeamSpace: Manage team memberships', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])

    sdef = wf.states['private']
    sdef.setProperties(title="""Visible and editable only by owner or reviewer""",
                       transitions=('show', 'team'))
    sdef.setPermission('Access contents information', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'Reviewer'])
    sdef.setPermission('Modify portal content', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('View', 0, ['Manager', 'Owner', 'ProjectAdmin', 'ProjectContentMgr', 'Reviewer'])
    sdef.setPermission('Delete objects', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])
    sdef.setPermission('TeamSpace: Manage team memberships', 0, ['Manager', 'Owner', 'ProjectAdmin', 'Reviewer'])


    ## Transitions initialization
    tdef = wf.transitions['team']
    tdef.setProperties(title="""Member makes content team visible""",
                       new_state_id="""team_visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make team visible""",
                       actbox_url="""%(content_url)s/what_is_this_for""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Modify portal content'},
                       )

    tdef = wf.transitions['hide']
    tdef.setProperties(title="""Member makes content private""",
                       new_state_id="""private""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make private""",
                       actbox_url="""%(content_url)s/content_hide_form""",
                       actbox_category="""workflow""",
                       props={'guard_roles': 'Owner; Manager; Reviewer; TeamReviewer'},
                       )

    tdef = wf.transitions['show']
    tdef.setProperties(title="""Member makes content visible""",
                       new_state_id="""visible""",
                       trigger_type=1,
                       script_name="""""",
                       after_script_name="""""",
                       actbox_name="""Make visible""",
                       actbox_url="""%(content_url)s/content_show_form""",
                       actbox_category="""workflow""",
                       props={'guard_permissions': 'Modify portal content'},
                       )

    ## State Variable
    wf.variables.setStateVar('review_state')

    ## Variables initialization
    vdef = wf.variables['action']
    vdef.setProperties(description="""The last transition""",
                       default_value="""""",
                       default_expr="""transition/getId|nothing""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description="""Provides access to workflow history""",
                       default_value="""""",
                       default_expr="""state_change/getHistory""",
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['actor']
    vdef.setProperties(description="""The ID of the user who performed the last transition""",
                       default_value="""""",
                       default_expr="""user/getId""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description="""Comments about the last transition""",
                       default_value="""""",
                       default_expr="""python:state_change.kwargs.get('comment', '')""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['time']
    vdef.setProperties(description="""Time of the last transition""",
                       default_value="""""",
                       default_expr="""state_change/getDateTime""",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    ## Worklists Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description="""Reviewer tasks""",
                       actbox_name="""Pending (%(count)d)""",
                       actbox_url="""%(portal_url)s/search?review_state=pending""",
                       actbox_category="""global""",
                       props={'guard_permissions': 'Review portal content', 'var_match_review_state': 'pending'})


def createOpenplans_team_workflow(id):
    "..."
    ob = DCWorkflowDefinition(id)
    setupOpenplans_team_workflow(ob)
    return ob

addWorkflowFactory(createOpenplans_team_workflow,
                   id='openplans_team_workflow',
                   title='OpenPlans Team Workflow')

    