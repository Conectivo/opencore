#
# Generated by dumpDCWorkflow.py written by Sebastien Bigaret
# Original workflow id/title: openplans_member_workflow/OpenPlans Member Workflow
# Date: 2006/11/01 10:10:45.053 US/Pacific
#
# WARNING: this dumps does NOT contain any scripts you might have added to
# the workflow, IT IS YOUR RESPONSABILITY TO MAKE BACKUPS FOR THESE SCRIPTS.
#
# The following scripts have been detected and should be backed up:
# - enable (External Method)
# - disable (External Method)
# - register (External Method)
#
"""
Programmatically create a workflow type.
"""
__version__ = "$Id: dumpDCWorkflow.py 31159 2006-09-28 21:40:48Z encolpe $"

from Products.CMFCore.WorkflowTool import addWorkflowFactory
from Products.DCWorkflow.DCWorkflow import DCWorkflowDefinition
from Products.PythonScripts.PythonScript import PythonScript
from Products.ExternalMethod.ExternalMethod import ExternalMethod

def setup_openplans_member_workflow(wf):
    """Setup the workflow
    """
    wf.setProperties(title='OpenPlans Member Workflow')

    for s in ('disabled', 'new', 'new_private', 'private', 'public'):
        wf.states.addState(s)
    for t in ('auto_register',
              'disable',
              'enable_private',
              'enable_public',
              'import_fail',
              'make_private',
              'make_public',
              'migrate',
              'register_wrapped_user',
              'trigger'):
        wf.transitions.addTransition(t)
    for v in ('action', 'actor', 'comments', 'review_history', 'time'):
        wf.variables.addVariable(v)
    for l in ('reviewer_queue',):
        wf.worklists.addWorklist(l)
    for p in ('Set own properties',
              'Set own password',
              'Manage users',
              'View',
              'Modify portal content',
              'Mail forgotten password',
              'membrane: Edit member id',
              'membrane: Register member'):
        wf.addManagedPermission(p)

    # Initial State
    wf.states.setInitialState('new')

    # State Initialization
    sdef = wf.states['disabled']
    sdef.setProperties(title='Disabled',
                       description='',
                       transitions=('enable_private', 'enable_public'))
    sdef.setPermission('Set own properties', 0,
                       ['Manager'])
    sdef.setPermission('Set own password', 0,
                       ['Manager'])
    sdef.setPermission('Manage users', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Manager'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager'])
    sdef.setPermission('Mail forgotten password', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Edit member id', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Register member', 0,
                       ['Manager'])

    sdef = wf.states['new']
    sdef.setProperties(title='Newly created member',
                       description='',
                       transitions=('auto_register', 'import_fail', 'migrate', 'register_wrapped_user', 'trigger'))
    sdef.setPermission('Set own properties', 0,
                       ['Anonymous', 'Manager'])
    sdef.setPermission('Set own password', 0,
                       ['Anonymous', 'Manager'])
    sdef.setPermission('Manage users', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Anonymous', 'Manager'])
    sdef.setPermission('Modify portal content', 0,
                       ['Anonymous', 'Manager'])
    sdef.setPermission('Mail forgotten password', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Edit member id', 0,
                       ['Anonymous', 'Manager'])
    sdef.setPermission('membrane: Register member', 0,
                       ['Anonymous', 'Manager'])

    sdef = wf.states['new_private']
    sdef.setProperties(title='Newly created member',
                       description='',
                       transitions=('auto_register', 'migrate', 'register_wrapped_user', 'trigger'))
    sdef.setPermission('Set own properties', 0,
                       ['Manager'])
    sdef.setPermission('Set own password', 0,
                       ['Manager'])
    sdef.setPermission('Manage users', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Manager'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager'])
    sdef.setPermission('Mail forgotten password', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Edit member id', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Register member', 0,
                       ['Manager'])

    sdef = wf.states['private']
    sdef.setProperties(title='Registered user, private profile',
                       description='',
                       transitions=('make_public', 'disable'))
    sdef.setPermission('Set own properties', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Set own password', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Manage users', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Mail forgotten password', 0,
                       ['Anonymous', 'Manager', 'Owner'])
    sdef.setPermission('membrane: Edit member id', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Register member', 0,
                       ['Manager'])

    sdef = wf.states['public']
    sdef.setProperties(title='Registered user, public profile',
                       description='',
                       transitions=('make_private', 'disable'))
    sdef.setPermission('Set own properties', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Set own password', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Manage users', 0,
                       ['Manager'])
    sdef.setPermission('View', 0,
                       ['Anonymous', 'Authenticated', 'Manager', 'Member', 'Owner'])
    sdef.setPermission('Modify portal content', 0,
                       ['Manager', 'Owner'])
    sdef.setPermission('Mail forgotten password', 0,
                       ['Anonymous', 'Manager', 'Owner'])
    sdef.setPermission('membrane: Edit member id', 0,
                       ['Manager'])
    sdef.setPermission('membrane: Register member', 0,
                       ['Manager'])

    # Transition Initialization
    tdef = wf.transitions['auto_register']
    tdef.setProperties(title='Begin auto registration of member',
                       description='',
                       new_state_id='public',
                       trigger_type=0,
                       script_name='register',
                       after_script_name='',
                       actbox_name='Automatically approve member',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': 'here/isValid',
                              'guard_permissions': 'membrane: Register member'},
                       )

    tdef = wf.transitions['disable']
    tdef.setProperties(title='Disable member',
                       description='',
                       new_state_id='disabled',
                       trigger_type=1,
                       script_name='disable',
                       after_script_name='',
                       actbox_name='Disable member',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_permissions': 'Manage users'},
                       )

    tdef = wf.transitions['enable_private']
    tdef.setProperties(title='Re-enable member',
                       description='',
                       new_state_id='private',
                       trigger_type=1,
                       script_name='',
                       after_script_name='enable',
                       actbox_name='Re-enable member',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': "python:getattr(here,'old_state',None) == 'private'",
                              'guard_permissions': 'Manage users'},
                       )

    tdef = wf.transitions['enable_public']
    tdef.setProperties(title='Re-enable member',
                       description='',
                       new_state_id='public',
                       trigger_type=1,
                       script_name='',
                       after_script_name='enable',
                       actbox_name='Re-enable member',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': "python:getattr(here,'old_state',None) == 'public'",
                              'guard_permissions': 'Manage users'},
                       )

    tdef = wf.transitions['import_fail']
    tdef.setProperties(title='failed import',
                       description='',
                       new_state_id='import_fail',
                       trigger_type=2,
                       script_name='',
                       after_script_name='',
                       actbox_name='import_fail',
                       actbox_url='',
                       actbox_category='workflow',
                       props=None,
                       )

    tdef = wf.transitions['make_private']
    tdef.setProperties(title='Make member profile private',
                       description='',
                       new_state_id='private',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make member profile private',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Owner; Manager'},
                       )

    tdef = wf.transitions['make_public']
    tdef.setProperties(title='Make member profile public',
                       description='',
                       new_state_id='public',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Make member profile public',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Owner; Manager'},
                       )

    tdef = wf.transitions['migrate']
    tdef.setProperties(title='Migrate from pre-1.0 CMF MemberData',
                       description='',
                       new_state_id='public',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Migrate from pre-1.0 CMF MemberData',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_roles': 'Manager'},
                       )

    tdef = wf.transitions['register_wrapped_user']
    tdef.setProperties(title='Automatically register a wrapped Member',
                       description='',
                       new_state_id='public',
                       trigger_type=0,
                       script_name='',
                       after_script_name='',
                       actbox_name='Register wrapped user',
                       actbox_url='',
                       actbox_category='workflow',
                       props={'guard_expr': 'python:here.hasUser()', 'guard_roles': 'Owner'},
                       )

    tdef = wf.transitions['trigger']
    tdef.setProperties(title='Trigger automatic transitions',
                       description='',
                       new_state_id='',
                       trigger_type=1,
                       script_name='',
                       after_script_name='',
                       actbox_name='Trigger automatic transitions',
                       actbox_url='',
                       actbox_category='workflow',
                       props=None,
                       )

    # State Variable
    wf.variables.setStateVar('review_state')

    # Variable Initialization
    vdef = wf.variables['action']
    vdef.setProperties(description='The last transition',
                       default_value='',
                       default_expr='transition/getId|nothing',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['actor']
    vdef.setProperties(description='The ID of the user who performed the last transition',
                       default_value='',
                       default_expr='user/getId',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['comments']
    vdef.setProperties(description='Comments about the last transition',
                       default_value='',
                       default_expr="python:state_change.kwargs.get('comment', '')",
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    vdef = wf.variables['review_history']
    vdef.setProperties(description='Provides access to workflow history',
                       default_value='',
                       default_expr='state_change/getHistory',
                       for_catalog=0,
                       for_status=0,
                       update_always=0,
                       props={'guard_permissions': 'Request review; Review portal content'})

    vdef = wf.variables['time']
    vdef.setProperties(description='Time of the last transition',
                       default_value='',
                       default_expr='state_change/getDateTime',
                       for_catalog=0,
                       for_status=1,
                       update_always=1,
                       props=None)

    # Worklist Initialization
    ldef = wf.worklists['reviewer_queue']
    ldef.setProperties(description='Reviewer tasks',
                       actbox_name='Pending (%(count)d)',
                       actbox_url='%(portal_url)s/search?review_state=pending',
                       actbox_category='global',
                       props={'guard_permissions': 'Review portal content',
                              'var_match_review_state': 'pending'})

    # Script Initialization
    wf.scripts._setObject('disable',
                          ExternalMethod('disable', 'Disable a Member',
                                         'remember.workflow', 'disable'))
    
    wf.scripts._setObject('enable',
                          ExternalMethod('enable', 'Enable a Member',
                                         'remember.workflow', 'enable'))
    
    wf.scripts._setObject('register',
                          ExternalMethod('register', 'Register a Member',
                                         'remember.workflow', 'register'))
    
def create_openplans_member_workflow(id):
    """Create, setup and return the workflow.
    """
    ob = DCWorkflowDefinition(id)
    setup_openplans_member_workflow(ob)
    return ob

addWorkflowFactory(create_openplans_member_workflow,
                   id='openplans_member_workflow',
                   title='OpenPlans Member Workflow')
