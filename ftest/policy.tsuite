# suite of project policy tests 

# create a couple of users 
create_user(user=${u1_name}, fullname=${u1_fullname}, email=${u1_email})
create_user(user=${u2_name}, fullname=${u2_fullname}, email=${u2_email})

# u1 will create a project (initially open) 
login(user=${u1_name})
create_project(projfeaturelets='listen')
change_project_policy(projpolicy='open_policy')
listen_create_list(user=${u1_name})
can_see_lists
check_create_mailing_list
logout 

# should be able to see it as anonymous
project_listed
can_see_lists

# login as u2, should be able to see it, and edit it 
login(user=${u2_name})
project_listed
can_see_lists
edit_project 
logout 

# now u1 changes it to medium 
login(user=${u1_name})
change_project_policy(projpolicy='medium_policy')
can_see_lists
logout 

# should be able to see it as anonymous
project_listed 
can_see_lists

# u2 should now be able to see it, but not edit it 
login(user=${u2_name})
project_listed
can_see_lists
not_edit_project 
logout 

# now u1 adds u2 as a member 
login(user=${u1_name})
add_project_member(membername=${u2_name})
logout 

# u2 has to approve membership
login(user=${u2_name})
approve_project_membership(membername=${u2_name})
logout

# now u2 should be able to edit 
login(user=${u2_name})
project_listed
edit_project 
check_create_mailing_list
logout 

# now u1 changes it to closed 
login(user=${u1_name})
change_project_policy(projpolicy='closed_policy')
can_see_lists
logout 

# u2 should still be able to see and edit 
login(user=${u2_name})
project_listed
edit_project 
can_see_lists
logout 


# now u1 removes u2 as a member 
login(user=${u1_name})
remove_project_member(membername=${u2_name})
logout

# trigger the catalog queue
run_cat_queue

# u2 should not be able to see it 
login(user=${u2_name})
run_cat_queue
project_not_listed
# nor edit it
not_edit_project
cannot_see_lists
logout 

# anonymous shouldn't see it or modify it either
project_not_listed
not_edit_project
cannot_see_lists

# destroy the project so we can recreate it again
destroy_project

######
# Test for sec'ty reindexing failures
######

# u1 will create a new closed project, add u2 as a member
login(user=${u1_name})
create_closed_project
add_project_member(membername=${u2_name})
logout 

# u2 has to approve membership
login(user=${u2_name})
approve_project_membership(membername=${u2_name})

# u2 doesn't see the project home on the contents page
contents_nofind(lookfor='project-home')

# trigger the catalog queue
run_cat_queue

# u2 _does_ see the project home on the contents page
contents_find(lookfor='project-home')
logout