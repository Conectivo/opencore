Test for Remote Auth
====================

We start by setting up the Plone site's 'remote_auth_sites' property
so it tries to do remote authentication (otherwise the plugin will
just return).

    >>> portal = self.portal
    >>> portal.manage_changeProperties(
    ...                     remote_auth_sites=
    ...                     ['http://localhost:8080/openplans'])

Then we push some response data into our mock HTTP connection object
so that the plugin and the event handler will get reasonable data back
from their http requests.

    >>> from opencore.testing.minimock import HTTPMock
    >>> from opencore.auth.tests import memxml
    >>> HTTPMock.add_to_response_content('some-bogus-auth-hash')
    >>> HTTPMock.add_to_response_content(memxml)

Now we're ready to see if the plugin will authenticate successfully.

    >>> login = 'login'
    >>> plugin = self.portal.acl_users.opencore_remote_auth
    >>> credentials = {'login': login, 'password': 'password'}
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result == (login, login))

Let's add failure responses to make sure auth failures are handled
correctly.  First a 404 (member doesn't exist):

    >>> HTTPMock.add_to_response_content('', 404)
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result is None)

Now a 400 (auth failed):

    >>> HTTPMock.add_to_response_content('', 400)
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result is None)
