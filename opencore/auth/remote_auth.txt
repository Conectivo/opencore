Test for Remote Auth
====================

We start by setting up the 'remote_auth_sites' property so it tries to
do remote authentication (otherwise the plugin will just return).

    >>> oc_props = self.portal.portal_properties.opencore_properties
    >>> oc_props.manage_changeProperties(
    ...                         remote_auth_sites=
    ...                         ['http://localhost:8080/openplans'])

Then we push some response data into our mock HTTP connection object
so that the plugin and the event handler will get reasonable data back
from their http requests.

    >>> from opencore.testing.minimock import HTTPMock
    >>> from opencore.auth.tests import memxml
    >>> HTTPMock.add_to_response_content('some-bogus-auth-hash')
    >>> HTTPMock.add_to_response_content(memxml)

Now we're ready to see if the plugin will authenticate successfully.

    >>> login = 'login'
    >>> plugin = self.portal.acl_users.opencore_remote_auth
    >>> credentials = {'login': login, 'password': 'password'}
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result == (login, login))

Now that a member object exists, the remote auth plugin shouldn't make
any HTTP requests:

    >>> auth_result = plugin.authenticateCredentials(credentials)
    >>> self.failUnless(auth_result is None)

We switch to a different username so the new member object doesn't
interfere for the remaining tests:

    >>> credentials['login'] = 'login2'

Let's add failure responses to make sure auth failures are handled
correctly.  First a 404 (member doesn't exist):

    >>> HTTPMock.add_to_response_content('', 404)
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result is None)

Now a 400 (auth failed):

    >>> HTTPMock.add_to_response_content('', 400)
    >>> auth_result = plugin.authenticateCredentials(credentials)
    Called httplib2.Http.request...
    >>> self.failUnless(auth_result is None)
