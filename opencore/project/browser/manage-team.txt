-*- mode: doctest ;-*-

===============================
 Project Team Management  View
===============================

First we set a project up w/ a membership invitation and a membership
request so we've got some more useful data.

member 'm1' is ProjectAdmin of project 'p3'::

    >>> proj = self.portal.projects.p3 
    >>> team = proj.getTeams()[0]

member m4 is not on team::

    >>> self.login('m4')
    >>> team.join()
    True
    >>> self.login('m1')

remove member 'm3' to re-add::

    >>> team.manage_delObjects(ids=['m3']) 
    >>> team.addMember('m3')
    <OpenMembership at ...m3>
    >>> view = proj.restrictedTraverse('manage-team')
    >>> view
    <Products.Five.metaclass.ManageTeamView object at ...>

The view has properties to get info for the team members and all
pending membership invitations and requests::

    >>> len(view.pending_requests)
    1
    >>> len(view.pending_invitations)
    1
    >>> len(view.active_mships)
    3
    >>> len(view.pending_mships)
    2

Verify that we get the appropriate error messages when actions
are attempted without anything checked::

    >>> self.clearMemoCache()
    >>> view.approve_requests([])
    {}
    >>> get_status_messages(view)
    [u'Please select members to approve.']
    >>> view.discard_requests([])
    {}
    >>> get_status_messages(view)
    [u'Please select members to discard.']
    >>> view.reject_requests([])
    {}
    >>> get_status_messages(view)
    [u'Please select members to deny.']

Now let's make sure the project admin can approve membership requests.
And an event should get fired as well.
First we need to clear out the memoized cache:

    >>> self.clearMemoCache()

    >>> self.clear_events()
    >>> self.events
    []
    >>> res = view.approve_requests(['m4'])
    >>> from opencore.interfaces.event import IJoinedProjectEvent
    >>> self.event_fired(IJoinedProjectEvent)
    True
    >>> len(view.pending_requests)
    0
    >>> len(view.active_mships)
    4

Verify that the notifying email went out::

    >>> mailhost = view.get_tool('MailHost')
    >>> len(mailhost.messages)
    1

Also verify that the transient messages were saved::

    >>> from opencore.interfaces.message import ITransientMessage
    >>> tm = ITransientMessage(self.portal)
    >>> list(tm.get_msgs('m4', view.msg_category))
    [(0, 'You have been accepted to <a href="http://nohost/plone/projects/p3">Project Three</a>')]

Next we recreate the request and test discarding; no add'l email
should be sent::

    >>> self.clearMemoCache()
    >>> team.manage_delObjects(ids=['m4'])
    >>> self.login('m4')
    >>> team.join()
    True
    >>> self.login('m1')
    >>> res = view.discard_requests(['m4'])
    >>> len(view.pending_requests)
    0
    >>> len(view.active_mships)
    3
    >>> 'm4' in team.objectIds()
    False
    >>> len(mailhost.messages)
    1

Try again, this time reject instead of discard, should generate an
email notifier::

    >>> self.clearMemoCache()
    >>> self.login('m4')
    >>> team.join()
    True
    >>> self.login('m1')
    >>> res = view.reject_requests(['m4'])
    >>> get_status_messages(view)
    [u'Request denied: m4', u'Request discarded: m4', u'You have added m4.']
    >>> len(view.pending_requests)
    0
    >>> len(view.active_mships)
    3
    >>> 'm4' in team.objectIds()
    True
    >>> len(mailhost.messages)
    2

And we should also have some rejection msgs for the user::

    >>> msgs = list(tm.get_msgs('m4', view.msg_category))
    >>> msgs[0]
    (0, 'You have been accepted to <a href="http://nohost/plone/projects/p3">Project Three</a>')
    >>> msgs[1]
    (1, 'You have been denied membership to <a href="http://nohost/plone/projects/p3">Project Three</a>')

Verify that invitation reminders go out::

    >>> self.clearMemoCache()
    >>> res = view.remind_invitations(['m3'])
    >>> len(mailhost.messages)
    3
    >>> get_status_messages(view)
    [u'Reminder sent: m3']

Make sure we can remove invitations; email notifier should be sent::

    >>> self.clearMemoCache()
    >>> res = view.remove_invitations(['m3'])
    >>> get_status_messages(view)
    [u'Invitation removed: m3']
    >>> len(view.pending_invitations)
    0
    >>> len(mailhost.messages)
    4

Make sure we get a helpful PSM if we didn't select anyone to remind::
    >>> res = view.remind_invitations([])
    >>> print get_status_messages(view)[0]
    Please select at least one person to send a reminder to.

Test membership removal.  We set the HTTP_REFERER on the request
because the octopus decorator requires (and returns) it.  Notifier
should be sent::

    >>> self.clearMemoCache()
    >>> self.clear_events()
    >>> res = view.remove_members(['m2'])
    
    A role change event gets fired in addition to a left project event
    >>> from opencore.interfaces.event import IChangedTeamRolesEvent
    >>> self.event_fired(IChangedTeamRolesEvent)
    True
    >>> from opencore.interfaces.event import ILeftProjectEvent
    >>> self.event_fired(ILeftProjectEvent)
    True
    >>> len(view.active_mships)
    2
    >>> len(mailhost.messages)
    5

And if we try to remove ourselves, it should not be allowed

But we have to remove the portal owner first. We'll also
update his roles to include ProjectAdmin again, since it
won't keep ProjectAdmin when we remove him::
    >>> view.remove_members(['portal_owner'])
    {'portal_owner': {'action': 'delete'}}
    >>> team.setTeamRolesForMember('portal_owner', ('ProjectMember', 'ProjectAdmin'))
    >>> get_status_messages(view)
    [u'Member deactivated: m2', u'Member deactivated: portal_owner']

Now we can try to remove the last admin
    >>> view.remove_members(['m1'])
    {}
    >>> get_status_messages(view)
    [u'Cannot remove last admin: m1']

And if we try nobody

    >>> view.remove_members([])
    {}
    >>> get_status_messages(view)
    [u'Please select members to remove.']

Transient Message should be added as well

    >>> list(tm.get_msgs('m2', view.msg_category))
    [(0, 'You have been deactivated from <a href="http://nohost/plone/projects/p3">Project Three</a>')]

Ensure that form submissions changing the team roles for members
behave as expected.  At the beginning we re-add and approve m3 so we
can use him for testing later:

    >>> self.clearMemoCache()
    >>> mship = team.addMember('m3')
    >>> mship
    <OpenMembership at ...>
    >>> wft = view.get_tool('portal_workflow')
    >>> status = wft.getStatusOf('openplans_team_membership_workflow', mship)
    >>> status['actor']
    'm1'
    >>> status['actor'] = 'm3'
    >>> wft.setStatusOf('openplans_team_membership_workflow', mship, status)
    >>> res = view.approve_requests(['m3'])
    >>> list(tm.get_msgs('m3', view.msg_category))
    [(0, 'You have been accepted to <a href="http://nohost/plone/projects/p3">Project Three</a>')]
    >>> 'm3' in mship.getActiveMemberIds()
    True

Verify roles
Also verify that events get fired for role changes
    >>> team.getHighestTeamRoleForMember('m1')
    'ProjectAdmin'
    >>> team.getHighestTeamRoleForMember('portal_owner')
    'ProjectAdmin'
    >>> team.getHighestTeamRoleForMember('m3')
    'ProjectMember'
    >>> view.request.form.update(
    ...    {'task|batch_role|set-roles': 'Lalala',
    ...     'role': ['m1', 'portal_owner', 'm3'],
    ...     'm1_role': 'ProjectAdmin',
    ...     'portal_owner_roles': 'ProjectMember',
    ...     'm3_role': 'ProjectAdmin'
    ...     })
    >>> view.request.environ['HTTP_REFERER'] = 'referer'
    >>> self.clear_events()
    >>> html = view.set_roles(['m1', 'portal_owner', 'm3'],
    ...                      [{'role': 'ProjectAdmin'},
    ...                       {'role': 'ProjectMember'},
    ...                       {'role': 'ProjectAdmin'}])
    >>> get_status_messages(view)
    [u'You have added m3.', ...]

2 events should have been fired (2 role changes)
portal_owner was demoted, and m3 was promoted
    >>> len(self.events)
    2
    >>> sorted([mship_obj.id for mship_obj, event in self.events])
    ['m3', 'portal_owner']
    >>> team.getHighestTeamRoleForMember('m1')
    'ProjectAdmin'
    >>> team.getHighestTeamRoleForMember('portal_owner')
    'ProjectMember'
    >>> team.getHighestTeamRoleForMember('m3')
    'ProjectAdmin'

The user should also get a transient message saying that he was made
into an admin
    >>> list(tm.get_msgs('m3', view.msg_category))[-1]
    (1, 'You are now an admin of <a href="http://nohost/plone/projects/p3">Project Three</a>')

If a project admin is removed from the team, he should lose the
ProjectAdmin role::
    >>> view.doMshipWFAction('deactivate', ('m3',))
    ['m3']
    >>> team.getHighestTeamRoleForMember('m3')
    'ProjectMember'

Make him an admin again::
    >>> team.manage_delObjects(ids=['m3']) # <-- remove to re-add
    >>> team.addMember('m3')
    <OpenMembership at ...m3>
    >>> team.setTeamRolesForMember('m3', ('ProjectMember', 'ProjectAdmin'))

Demotions should also yield transient messages
    >>> view.request.form.update(
    ...    {'task|batch_role|set-roles': 'Lalala',
    ...     'role': ['m3'],
    ...     'm3_role': 'ProjectMember',
    ...     })
    >>> html = view.set_roles(['m3'], [dict(role='ProjectMember')])
    >>> list(tm.get_msgs('m3', view.msg_category))[-1]
    (2, 'You are no longer an admin of <a href="http://nohost/plone/projects/p3">Project Three</a>')
    >>> get_status_messages(view)
    [u'm3 is no longer an administrator']


Now test member search.  We should be getting results on with or without
team memberships.

For the first search, m1 is active, m2 is inactive, m3 has no
membership, and m4 is rejected_by_admin.  All should be returned:

    >>> team.removeMember('m3')
    >>> view.request.form.clear()
    >>> view.request.form['search_for'] = 'mem'
    >>> view.search_members()
    >>> len(view.results)
    4
    >>> ids = [b.getId for b in view.results]
    >>> 'm1' in ids
    True

Now we add m3 as a pending member, should remain in the results:

    >>> team.addMember('m3') # <-- now pending
    <OpenMembership at ...>
    >>> view.search_members()
    >>> len(view.results)
    4
    >>> ids = [b.getId for b in view.results]
    >>> 'm1' in ids
    True
    >>> 'm3' in ids
    True
    >>> team.removeMember('m3')

Next test the 'invite' button for member invitation.  First we try
with a member that is not on the team.  Notifier should go out:

    >>> self.clearMemoCache()
    >>> res = view.invite_member(['m3'])
    >>> len(view.pending_invitations)
    1
    >>> len(mailhost.messages)
    8

Now try to reinvite an inactive member::

    >>> self.clearMemoCache()
    >>> res = view.invite_member(['m2'])
    >>> len(view.pending_invitations)
    2
    >>> len(mailhost.messages)
    9

And last we reinvite m4, who was rejected_by_admin::

    >>> self.clearMemoCache()
    >>> res = view.invite_member(['m4'])
    >>> len(view.pending_invitations)
    3
    >>> len(mailhost.messages)
    10

Email Invitations
=================

Okay, now to deal with inviting people by email address.  First we try
a couple of addresses that don't belong to any site members:

    >>> inviteview = proj.restrictedTraverse('invite')
    >>> clear_status_messages(view)
    >>> clear_status_messages(inviteview)
    >>> self.clearMemoCache()
    >>> inviteview.request.form.clear()
    >>> invites = 'doesnotexist@example.com, isnotthere@example.com\n'
    >>> inviteview.request.form.update({'task|email-invites': 'Send',
    ...                                 'email-invites': invites})

let's test some of the helper methods.  'join_url' creates the url the
invitee will use to join the project, and if not currently a user, the
website.

    >>> print inviteview.join_url('email@mail.com', 'KEY', 'PROJECT_ID')
    http://nohost/plone/invite-join?project=PROJECT_ID&email=email%40mail.com&__k=KEY

    >>> inviteview.add_email_invites()

# of pending invitations shouldn't change::

    >>> len(view.pending_invitations) 
    3
    >>> len(view.pending_email_invites)
    2
    >>> len(mailhost.messages)
    12

Then we try to invite someone using an email address that is already
in use by a site member who's not a project member:

    >>> self.clearMemoCache()
    >>> team.removeMember('m3')
    >>> len(view.pending_invitations) # <- should go up by one
    2

    >>> self.clearMemoCache()
    >>> email = view.membertool.getMemberById('m3').getEmail()
    >>> inviteview.request.form.update({'task|email-invites': 'Send',
    ...                                 'email-invites': email})
    >>> inviteview.add_email_invites()
    >>> len(view.pending_invitations) # <- should go up by one
    3
    >>> len(view.pending_email_invites) # <- doesn't change
    2
    >>> len(mailhost.messages) # <- increase by one
    13

Try the same one again, should have no result::

    >>> self.clearMemoCache()
    >>> inviteview.add_email_invites()
    >>> len(view.pending_invitations)
    3
    >>> len(view.pending_email_invites)
    2
    >>> len(mailhost.messages)
    13

    >>> pprint(get_status_messages(view))
    [u'Email invitations: doesnotexist@example.com, isnotthere@example.com',
     u'Members for whom invitation failed: m3',
     u'Members invited: m3']

If we enter in an invalid encoding for a bad email address, we should not get a
UnicodeDecodeError. We get a portal status message saying that the email
address could not be decoded for now. Maybe we should try to decode utf-8 instead?

    >>> self.clearMemoCache()
    >>> inviteview.request.form['email-invites'] = 'samiam \xc3\xb1'
    >>> inviteview.add_email_invites()
    >>> get_status_messages(inviteview)
    [u'An invalid email address was entered. If you believe this is incorrect, please <a href="http://nohost/plone/contact-site-admin">contact</a> us']

Verify we can send reminders to the email invitees::

    >>> self.clearMemoCache()
    >>> inviteview.request.form['email-invites'] = invites.replace(" ", "")
    >>> inviteview.remind_email_invites()

    >>> get_status_messages(inviteview)
    [u'Reminders sent: doesnotexist@example.com, isnotthere@example.com']
    >>> len(mailhost.messages) # <- increase by two
    15

And that they can be removed::

    >>> self.clearMemoCache()
    >>> addys = [addy.strip() for addy in invites.split(',')]
    >>> view.remove_email_invites(addys)
    {...doesnotexist@example.com...isnotthere@example.com...}
    >>> get_status_messages(view)
    [u'Email invitations removed: doesnotexist@example.com, isnotthere@example.com']
    >>> len(view.pending_email_invites)
    0
    >>> len(mailhost.messages) # <- increase by two
    17

Make sure that email invites to existing project members are reported correctly:

    >>> team.removeMember('m4')
    >>> self.login('m4') # <-- m4 not on team
    >>> team.join()
    True
    >>> self.login('m1')
    >>> res = view.approve_requests(['m4'])
    >>> 'm4' in mship.getActiveMemberIds()
    True
    >>> email = view.membertool.getMemberById('m4').getEmail()
    >>> inviteview.request.form.update({'task|email-invites': 'Send',
    ...                                 'email-invites': email})
    >>> len(mailhost.messages)
    18
    >>> self.clearMemoCache()
    >>> inviteview.add_email_invites()
    >>> len(mailhost.messages)
    18
    >>> pprint(get_status_messages(view))
    [u'You have added m4.', u'm4 is already a member of this project.']
