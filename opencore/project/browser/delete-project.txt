===================
 Project deletions
===================

Project deletion cascades a number of other events: external and
internal app deletion and the removal of the corresponding team and
all the memberships.

First, let's test our deletion handlers directly::

    >>> project = self.projects.p1

Let's add some featurelets::

    >>> self.loginAsPortalOwner() #@@ this should be the project owner

    >>> IFeatureletSupporter(project).installFeaturelet(TaskTrackerFeaturelet(project))
    Called httplib2.Http.request(
        'http://nohost:tasktracker/project/initialize/',
        headers={'X-Openplans-Project': 'p1', 'X-Openplans-Tasktracker-Initialize': 'True', 'Cookie': '__ac=...'},
        method='POST')

    >>> IFeatureletSupporter(project).installFeaturelet(ListenFeaturelet(project))

Flet Removal
============

    >>> from opencore.project.browser.preferences import handle_flet_uninstall

Tasks are now deleted from a project, and the message is sent through
cabochon::

    >>> handle_flet_uninstall(project) 

Gotta reinstall::    

    >>> IFeatureletSupporter(project).installFeaturelet(TaskTrackerFeaturelet(project))
    Called...


Team removal
============

    >>> from opencore.project.browser.preferences import delete_team

Make sure delete_team does what it's supposed to; we'll kill a team we
don't need for this test::

    >>> p4_proj = self.projects.p4
    >>> delete_team(p4_proj)
    >>> sorted(self.portal.portal_teams.objectIds())
    ['.wf_policy_config', 'p1', 'p2', 'p3']


Put it all together
===================

First make sure some projects have mailing lists (for testing bug #2055)::

    >>> IFeatureletSupporter(project).installFeaturelet(ListenFeaturelet(project))
    >>> IFeatureletSupporter(p4_proj).installFeaturelet(ListenFeaturelet(p4_proj))
    >>> ll = getUtility(IListLookup)
    >>> project.lists.objectIds()
    ['p1-discussion']
    >>> p4_proj.lists.objectIds()
    ['p4-discussion']
    >>> pprint(ll.showAddressMapping())
    [{'address': 'p1-discussion@...',
      'path': '/plone/projects/p1/lists/p1-discussion'},
     {'address': 'p4-discussion@...',
      'path': '/plone/projects/p4/lists/p4-discussion'}]


The project has a team::

    >>> project.getTeams()
    [<OpenTeam at /plone/portal_teams/p1>]

Get the delete view and invoke it::

    >>> view = project.restrictedTraverse('delete')
    >>> view
    <...project/browser/delete.pt...>

    >>> deleting = view._handle_delete()
    opencore.testing.utility.StubCabochonClient: uri: p1

    >>> deleting
    True

Free up the references::

    >>> del project
    >>> del view

p1 should be gone::

    >>> sorted(self.projects.objectIds())
    ['.wf_policy_config', 'p2', 'p3', 'p4']

The team should also be gone::

    >>> sorted(self.portal.portal_teams.objectIds())
    ['.wf_policy_config', 'p2', 'p3']

We redirect to the account page after project deletion::

    >>> print self.request.RESPONSE.headers['location']
    /account


We should have nuked the project's lists from the list lookup utility,
but NOT those of any other project (bug #2055)::

    >>> pprint(ll.showAddressMapping())
    [{'address': 'p4-discussion@...',
      'path': '/plone/projects/p4/lists/p4-discussion'}]

What else? [test wp, tt, removal]








