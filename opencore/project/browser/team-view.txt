========================
 Team View (aka Roster)
========================

Set up the view::

    >>> projects = self.portal.projects
    >>> from opencore.project.browser.team import ProjectTeamView
    >>> request = self.portal.REQUEST
    >>> proj = projects.p1
    >>> view = ProjectTeamView(proj, request)

Sort by username::

    >>> results = view.memberships('username')
    >>> brains = list(results)
    >>> len(brains)
    3
    
    >>> [b.getId for b in brains]
    ['m1', 'm3', 'm4']

Clear the memoize from the request::

    >>> utils.clear_all_memos(view)

Sorting by nothing should sort by username::

    >>> results = view.memberships(None)
    >>> brains = list(results)
    >>> len(brains)
    3
    
    >>> [b.getId for b in brains]
    ['m1', 'm3', 'm4']

Clear the memoize from the request::

    >>> utils.clear_all_memos(view)

Now try sorting by location::
First however, we have to give some members locations::

    >>> for mem_id, location in zip(['m1', 'm4', 'm3'], ['ny', 'ny', 'FL']):
    ...     mem = getattr(self.portal.portal_memberdata, mem_id)
    ...     mem.location = location
    ...     mem.reindexObject(idxs=['getLocation'])
    >>> results = view.memberships('location')
    >>> brains = list(results)
    >>> len(brains)
    3


Verify that the locations were set
    >>> for b in brains: assert b.getLocation

They should be sorted according to id, by location
    >>> [b.getId for b in brains]
    ['m3', 'm1', 'm4']

Member's projects
=================

The ids for the projects to which a member belongs are stored in the
member brains::

    >>> mem = self.portal.portal_memberdata.m4
    >>> mem_brain = view.get_tool('membrane_tool')(getId=mem.getId())[0]
    >>> pprint(sorted(mem_brain['project_ids']))
    ['p1', 'p2', 'p4']

When a query for members is made (see view.membership above), the
results are saved on the view::

    >>> pprint(sorted([x.getId for x in view.results]))
    ['m1', 'm3', 'm4']

Using the list of results and the project ids, the view retrieves the
brains for every project who's data needs to be displayed::

    >>> pprint(view.project_info)
    {'p1': <Products.ZCatalog.Catalog.mybrains object at ...>,
     'p2': <Products.ZCatalog.Catalog.mybrains object at ...>,
     'p3': <Products.ZCatalog.Catalog.mybrains object at ...>,
     'p4': <Products.ZCatalog.Catalog.mybrains object at ...>}

Note, project order is done on id. this matter because projects are
limited to first 10

Clear the memoize from the request::

    >>> utils.clear_all_memos(view)

Let's sort based on the membership date::

    >>> results = view.memberships('membership_date')
    >>> mem_brains = list(results)
    >>> len(mem_brains)
    3

We need to get the corresponding membership brains to verify if they are in
the correct order::

    >>> mship_brains = view.catalog(path='/plone/portal_teams/p1',
    ...                             portal_type='OpenMembership',
    ...                             getId=[b.getId for b in mem_brains],
    ...                             sort_on='made_active_date',
    ...                             sort_order='descending',
    ...                             )
    >>> len(mship_brains)
    3

Zope doesn't want to sort the mship in descending order,
So we do it ourselves here::

    >>> from operator import attrgetter
    >>> mship_brains = sorted(mship_brains,
    ...     key=attrgetter('made_active_date'),
    ...     reverse=True)

And now we can simply test that the ids are in the same order
    >>> [a.getId == b.getId for a, b in zip(mem_brains, mship_brains)]
    [True, True, True]

And for good measure, verify that the made active dates are really in
descending order
    >>> active_dates = [b.made_active_date for b in mship_brains]
    >>> active_dates[0] >= active_dates[1] >= active_dates[2]
    True

Clear the memoize from the request::

    >>> utils.clear_all_memos(view)


Sort base on contributions, should get no results::

    >>> results = view.memberships('contributions')
    >>> brains = list(results)
    >>> len(brains)
    0

And check that getting membership roles works::

    >>> view.is_admin('m1')
    False
    
    >>> view.is_admin('m3')
    True

Clear the memoize from the request::
    >>> utils.clear_all_memos(view)

Verify that traversing to the url gives us the expected class::

    >>> view = projects.p1.restrictedTraverse('team')
    >>> view
    <Products.Five.metaclass.SimpleViewClass from ...team-view.pt object at ...>



Call the view to make sure there are no exceptions::

    >>> out = view()
