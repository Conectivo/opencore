OctopoLite.

What is it?

It is a fusion of Octopus and FormLite!  It is a wonderful thing!

See octopus.txt and formlite.txt for details of each.

   >>> from opencore.nui.formhandler import OctopoLite, action
   >>> def decorator(func):
   ...     def inner(self, *a, **b):
   ...         print "in decorator!"
   ...         return func(self, *a, **b)
   ...     return inner
   >>> class FormTest(OctopoLite):
   ...     request = type('request', (object,), dict(form={}, environ={'HTTP_REFERER': "http://nohost"}))
   ...     def redirect(self, to):
   ...         return to
   ...     
   ...     @action('roklok', default=True)
   ...     def do_roklok(self, target=None, fields=None):
   ...         print "Rock!"
   ...         
   ...     @action('sod')
   ...     def do_sign_of_devil(self, target, fields=None):
   ...         print "eggs of the devil!"
   ...         return [i for i in target]
   ...     
   ...     @action('fine', apply=decorator)
   ...     def fine(self, target=None, fields=None):
   ...         print "fine!"
   ...         

   >>> view = FormTest()

The dispatcher is a rock. It dispatches based on the action it finds
in the form, encoded in an octopized format in the "task" field::

   >>> view.request.form['task'] = 'dummy_sod'
   >>> view()
   eggs of the devil!
   'http://nohost'

Since that request was not issued asynchronously, Octopolite swallowed
the method's return value and returned a redirect to HTTP_REFERER. We
can issue requests asynchronously to get back the return value directly::

   >>> view.request.form['mode'] = 'async'
   >>> view()
   eggs of the devil!
   ['dummy']

A request with no actions will dispatch to the action specified as default::

   >>> del view.request.form['task']
   >>> view()
   Rock!

You will probably want to specify decorators, like post_only or
jsonify, to be triggered only if the action is dispatched to, but
are not triggered if the action is called directly::

   >>> view.request.form['task'] = 'dummy_fine'
   >>> view()
   in decorator!
   fine!

   >>> view.fine()
   fine!

