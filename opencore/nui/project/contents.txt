=======================
 Project Contents View
=======================

    >>> self.loginAsPortalOwner()
    >>> proj = self.portal.projects.p2
    >>> view = proj.restrictedTraverse('contents')
    >>> view
    <...SimpleViewClass ...contents.pt ...>

The view has properties to get info for all of its wiki pages, file attachments and mailing lists::
    >>> view.pages
    [{...}]
    >>> view.lists
    []
    >>> view.files
    []

modify_contents is the view's form handler. It takes an action, a list
of sources, and a list of dicts of fields and values to apply to the
sources. These are all filled and passed in from the request via the
octopus_form_handler decorator provided the request uses a particular
format documented in octopus_form_handler. For asynchronous requests,
the return value from modify_contents (HTML or JSON) is sent; for
synchronous requests, a redirect back to the referer is issued.

Let's set up a request to synchronously rename the first wiki page in
the project's contents listing to "Hobbes"::

    >>> wikid = view.pages[0]['id']
    >>> wikid
    'project-home'
    >>> page = proj.restrictedTraverse(wikid)
    >>> page.Title()
    'Project Home'

    >>> request = self.portal.REQUEST
    >>> form = {'task': '%s_update' % wikid,
    ...         '%s_title' % wikid: 'Hobbes',
    ...         'item_type': 'pages'}
    >>> request.form = form
    >>> request.environ['HTTP_REFERER'] = 'http://nohost/openplans/projects/p2/contents'
    >>> view.modify_contents()
    'http://nohost/openplans/projects/p2/contents'

    >>> page.Title()
    'Hobbes'

We can also issue the request asynchronously::

    >>> request = self.portal.REQUEST
    >>> form = {'task': '%s_update' % wikid,
    ...         '%s_title' % wikid: 'Hume',
    ...         'item_type': 'pages',
    ...         'mode': 'async'}
    >>> request.form = form
    >>> view.modify_contents()
    {'project-home': '...<tr ...>...'}

    >>> page.Title()
    'Hume'

Deletes work the same way::

    >>> request = self.portal.REQUEST
    >>> form = {'task': '%s_delete' % wikid,
    ...         'item_type': 'pages',
    ...         'mode': 'async'}
    >>> request.form = form
    >>> view.modify_contents()
    ['project-home']

    >>> proj.restrictedTraverse(wikid)
    Traceback (most recent call last):
    ...
    AttributeError: project-home
