=============
Contact view
=============


It should require all the fields.

    >>> from opencore.nui.main.contact import ContactView
    >>> view = ContactView(self.portal, self.portal.REQUEST)
    >>> view.request.form.clear()
    >>> view.validate()
    >>> pprint(view.errors)
    {'message': 'Input required',
     'sender_from_address': 'Input required',
     'sender_fullname': 'Input required',
     'subject': 'Input required'}
    >>> view.send()
    >>> utils.get_status_messages(view)
    [u'Please correct the specified errors.']


The email must be valid.
    >>> view.request.form.clear()
    >>> view.request.form['sender_from_address'] = 'blah!'
    >>> view.validate()
    >>> view.errors['sender_from_address']
    'Invalid email address'

If you provide them all, it should send the mail.

    >>> view = ContactView(self.portal, self.portal.REQUEST)
    >>> view.request.form.update(
    ...    {'message': 'test message', 'subject': 'test subject',
    ...    'sender_fullname': 'Michael Bolton',
    ...    'sender_from_address': 'foo@foo.org'})
    >>> view.validate()
    >>> pprint(view.errors)
    {}
    >>> view.send()

XXX FIXME I stubbed out the mto in the test below, because I was getting a
test failure. My local hostname was not proper, which led the email
sender to believe that it wasn't actually an email address, but a
member id. The lookup then failed, which was why I was not getting a
mto back. Ideally, there would be a utility/adapter/object of some
sort whose sole purpose would be to perform the lookup. That way, I'd
have some sort of object that I could mock and jeer at. Currently
though, we're losing the test that the conversion is happening
properly here.

We should now see something on the mock mailhost, and a PSM::

    >>> mh = view.get_tool('MailHost')
    >>> pprint(mh.messages[-1])
    {'mfrom': 'foo@foo.org',
     'msg': 'test message',
     'mto': [...],
     'subject': 'test subject'}
    >>> utils.get_status_messages(view)
    [u'Message sent.']
