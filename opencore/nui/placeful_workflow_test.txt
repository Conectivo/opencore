Make a new project::
    >>> self.logout()
    >>> self.login('m1')
    >>> view = self.portal.projects.restrictedTraverse('create')
    >>> view
    <Products.Five.metaclass.ProjectAddView object at ...>
    >>> request = view.request.form
    >>> request.update(
    ...   projid='newproject',
    ...   title='new project',
    ...   workflow_policy='closed_policy',
    ...   )
    >>> view.handle_request()
    >>> self.portal.projects.newproject
    <OpenProject at /plone/projects/newproject>

Let's make sure that the wfp config is created for the team also::

    >>> getattr(self.portal.portal_teams.newproject, '.wf_policy_config')
    <WorkflowPolicyConfig at /plone/portal_teams/newproject/.wf_policy_conf>

Log out and query for the project as anonymous user (shouldn't show up)::
    >>> self.logout()
    >>> proj_query_results = view.catalog(portal_type='OpenProject', id='newproject')
    >>> [b.getId for b in proj_query_results]
    []

Now query for the mship as anonymous user... also shouldn't show up::
    >>> path = '/plone/portal_teams/newproject'
    >>> mship_query_results = view.catalog(portal_type='OpenMembership', id='m1', path=path)
    >>> [b.getId for b in mship_query_results]
    []

Verify that the correct workflow chain is associated with the mship object
    >>> teams = self.portal.portal_teams
    >>> team = teams.newproject
    >>> pwft = self.portal.portal_placeful_workflow
    >>> config = pwft.getWorkflowPolicyConfig(team)
    >>> config is not None
    True
    >>> config.getPlacefulChainFor('OpenMembership')
    ('closed_openplans_team_membership_workflow',)

And the object should be in the proper state
    >>> mship = teams.newproject.m1
    >>> wft = self.portal.portal_workflow
    >>> wft.getInfoFor(mship, 'review_state')
    'public'

If we create a closed project, we should verify that the member is in the
public state
    >>> self.login('m1')
    >>> from opencore.nui.project.view import ProjectAddView
    >>> request = self.portal.REQUEST
    >>> view = ProjectAddView(self.portal.projects, request)
    >>> request.form.update(dict(
    ...   workflow_policy='closed_policy',
    ...   update=True,
    ...   featurelets=[],
    ...   set_flets=1,
    ...   __initialize_project__=False,
    ...   id='new_closed_project',
    ...   title='new_closed_project',
    ...   ))
    >>> request.set('flet_recurse_flag', None)
    >>> html = view.handle_request()
    >>> project = self.portal.projects.new_closed_project
    >>> team = self.portal.portal_teams.new_closed_project
    >>> mship = team.m1
    >>> wft.getInfoFor(mship, 'review_state')
    'public'
