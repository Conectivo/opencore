A multi-adapter to annotate objects with a list of project ids to
store membership requests which should be created in the future.

It's really just wrapping a set.

It adapts IAnnotatable as the object which wants to make the request
(eg the member) and IATBTreeFolder as the folder containing the projects
which requests can be made for.

    >>> m1 = portal.portal_memberdata.m1
    >>> from zope.app.annotation.interfaces import IAnnotatable
    >>> IAnnotatable.providedBy(m1)
    True

    >>> from Products.ATContentTypes.interface.folder import IATBTreeFolder
    >>> projects_folder = portal.projects
    >>> IATBTreeFolder.providedBy(projects_folder)
    True

    >>> from zope.component import getMultiAdapter
    >>> pr = getMultiAdapter((m1, projects_folder), IPendingRequests)
    >>> pr
    <opencore.nui.member.pending_requests_multiadapter.PendingRequests object ...>

The member shouldn't have any requests initially::
    >>> pr.getRequests()
    ()

We store a few requests to join projects and then get them::
    >>> pr.addRequest("p1")
    >>> pr.getRequests()
    ('p1',)
    >>> pr.addRequest("p2")
    >>> pr.getRequests()
    ('p2', 'p1')

Adding a request which is already stored quietly does nothing::
    >>> pr.addRequest("p1")
    >>> pr.getRequests()
    ('p2', 'p1')

Adding a request for a team which doesn't exist or which the user doesn't
have permission to access will fail::
    >>> pr.addRequest("fake-project")
    Traceback (most recent call last):
    ...
    AttributeError: ...

We can remove requests, but only if they exist::
    >>> pr.removeRequest("p2")
    >>> pr.removeRequest("foo")
    Traceback (most recent call last):
    ...
    KeyError: 'foo'
    >>> pr.getRequests()
    ('p1',)

And we can remove all requests::
    >>> pr.removeAllRequestsForUser()
    >>> pr.getRequests()
    ()

Yay.
