-*- mode: doctest ;-*-

===================
 version lifecycle
===================

we need to test the ui and version state since the ui is maintained in
an annotation via events.

VERSION COMPARE
===============

Now let's exercise some version compare stuff

     >>> self.loginAsPortalOwner()
     >>> page = getattr(self.portal.projects.p1, page_id)

Verify that a redirect is raised on invalid input

Set up the version compare view and call it with no arguments::

     >>> from Products.Five.browser.pagetemplatefile import ViewPageTemplateFile
     >>> import os.path
     >>> prefix = os.path.dirname(__file__)
     >>> from opencore.nui.wiki import historyview
     >>> request = self.portal.REQUEST
     >>> view = historyview.WikiVersionCompare(page, request)
     >>> view = view.__of__(page)
     >>> view.handle_diff()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose the two versions you would like to compare.']

Try it with just one argument::

     >>> request.form['version_id'] = '0'
     >>> view.handle_diff()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose the two versions you would like to compare.']

Try with 2 arguments, but the versions don't exist::
     >>> request.form['version_id'] = ['0', '1']
     >>> view.handle_diff()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose a valid version.']

Try with more than 2 versions

     >>> request.form['version_id'] = ['0', '1', '2']
     >>> view.handle_diff()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose only two versions to compare.']

Now edit the page twice, so we can try a valid compare later::

     >>> request.form['version_id'] = ['0', '1']
     >>> repo = view.get_tool('portal_repository')
     >>> page.processForm(values=dict(text='some new text'))
     >>> repo.save(page, comment='new comment')
     >>> page.processForm(values=dict(text='some even newer text'))
     >>> repo.save(page, comment='newest comment')

Let's make sure the ui bits are updated also::

     >>> from opencore.nui.wiki.interfaces import IWikiHistory
     >>> history = IWikiHistory(page)
     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1})]

Now we should get a valid response

     >>> view.handle_diff()

Test that we can create a page via wicked #@@ (put somewhere else??)
     >>> from opencore.nui.wiki import add
     >>> request.form = {'Title' : 'newpage', 'section' : 'text'}
     >>> view = add.NuiPageAdd(page, request)
     >>> view = view.__of__(page)
     >>> view.add_content()
     'http://...projects/p1/newpage/edit...'

Login as different users, each time checking the last modified author::
     >>> self.logout()
     >>> self.login('m1')
     >>> from opencore.nui.wiki.view import WikiEdit
     >>> request.form['text'] = u'<p>foo<br>\n\u2255baz</p>'.encode('utf-8')
     >>> request.form['title'] = 'bar'
     >>> view = WikiEdit(page, request)
     >>> view = view.__of__(page)
     >>> view.handle_save()

Verify that version caching for ui has registered the changes::

     >>> history = IWikiHistory(page)
     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1}),
      (2,
       {'author': 'm1',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 2})]

Verify the last modified author and text changes took place::

     >>> proj = self.portal.projects.p1
     >>> from opencore.interfaces.catalog import ILastModifiedAuthorId, ILastModifiedComment
     >>> ILastModifiedAuthorId(page)
     'm1'
     >>> ILastModifiedAuthorId(proj)
     'm1'

     >>> page.text.raw
     u'<p>foo<br>\n\u2255baz</p>'

     >>> self.logout()
     >>> self.login('m3')
     >>> request.form['text'] = 'bar'
     >>> request.form['comment'] = 'this is a bar version'
     >>> view = WikiEdit(page, request)
     >>> view = view.__of__(page)
     >>> view.handle_save()
     >>> ILastModifiedAuthorId(page)
     'm3'
     >>> ILastModifiedAuthorId(proj)
     'm3'

Check that when logging back in as m1, m3 is still the last modified author
     >>> self.login('m1')
     >>> ILastModifiedAuthorId(page)
     'm3'

     >>> ILastModifiedAuthorId(proj)
     'm3'

Check the version comment::

     >>> print  ILastModifiedComment(page).getValue()
     this is a bar version

Let's try some reversions. First lets Verify that version caching for
ui has registered the changes.  We've made 4 edits and should have 4
versions w/ no comments (no blank initialization version)::

     >>> history = IWikiHistory(page)
     >>> len(history.annot)
     4

     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1}),
      (2,
       {'author': 'm1',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 2}),
      (3,
       {'author': 'm3',
        'comment': 'this is a bar version',
        'modification_date': DateTime(...),
        'version_id': 3})]


     >>> rview = page.restrictedTraverse('revert')
     >>> rview.request.environ['REQUEST_METHOD']='POST'

Can't revert to current::

     >>> rview.rollback_version(version_id='3')
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home

Try version 1::

     >>> request['version_id'] = '4'
     >>> rview.rollback_version(version_id='0')
     >>> history = IWikiHistory(page)
     >>> len(history.annot)
     5

     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1}),
      (2,
       {'author': 'm1',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 2}),
      (3,
       {'author': 'm3',
        'comment': 'this is a bar version',
        'modification_date': DateTime(...),
        'version_id': 3}),
      (4,
       {'author': 'm1',
        'comment': 'Rolled back to Initial Version',
        'modification_date': DateTime('...'),
        'version_id': 4})]

Status message should reflect the rollback (we get it this way since
the view is redirected and the psm haven't been cleared)::

     >>> del rview._redirected
     >>> print rview.portal_status_message.pop()
     Rolled back to Initial Version

Iterating over the history should give us the initial version first
(now the 'current' version)::

     >>> pprint(iter(history).next())
     {'author': 'm1',
      'comment': 'Rolled back to Initial Version',
      'modification_date': DateTime('...'),
      'version_id': 4}


You can also directly get items from the history by id:

     >>> history[0]['version_id']
     0

And you can look up items in reverse order with negative indeces,
so -1 is the most recent item:

     >>> history[-1]['version_id']
     4


Version comparison API::

     >>> view = page.restrictedTraverse('@@version_compare')
     >>> request = view.request.form = {}
     >>> request['version_id'] = ['0', '1']
     >>> view.handle_diff()
     >>> view.html_diff
     '<ins>some even newer text</ins> <del>some new text</del>'

Binary data in a version should give a sensible error::

     >>> view = page.restrictedTraverse('@@version_compare')
     >>> request['version_id'] = ['4', '5']
     >>> data = '\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00'
     >>> page.processForm(values={'text': data})
     >>> repo.save(page, comment='some binary data')
     >>> view.handle_diff()
     >>> view.html_diff
     u'Comparison not possible: Current Version is a binary file.'

