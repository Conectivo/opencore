===================
 version lifecycle
===================

we need to test the ui and version state since the ui is maintained in
an annotation via events.

VERSION COMPARE
===============

Now let's exercise some version compare stuff

    >>> self.loginAsPortalOwner()
    >>> page = getattr(self.portal.projects.p1, page_id)

Verify that a redirect is raised on invalid input

Set up the right view::
     >>> view = self.portal.unrestrictedTraverse('projects/p1/project-home/version_compare')
     >>> view
     <Products.Five.metaclass.SimpleViewClass from ...wiki-version-compare.pt object at ...>

Call it with no arguments::
     >>> response = view()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose the two versions you would like to compare.']

Reset the request
     >>> request = view.request.form = {}

Try it with just one argument::
     >>> request['version_id'] = '0'
     >>> response = view()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose the two versions you would like to compare.']

Try with 2 arguments, but the versions don't exist::
     >>> request['version_id'] = ['0', '1']
     >>> response = view()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose a valid version.']

Try with more than 2 versions
     >>> request['version_id'] = ['0', '1', '2']
     >>> response = view()
     Traceback (most recent call last):
     ...
     Redirect: http://nohost/plone/projects/p1/project-home/history
     >>> view.portal_status_message
     [u'Please choose only two versions to compare.']

Now edit the page twice, so we can try a valid compare later::
     >>> request['version_id'] = ['0', '1']
     >>> repo = view.get_tool('portal_repository')
     >>> page.processForm(values=dict(text='some new text'))
     >>> repo.save(page, comment='new comment')
     >>> page.processForm(values=dict(text='some even newer text'))
     >>> repo.save(page, comment='newest comment')

Let's make sure the ui bits are updated also::

     >>> from opencore.nui.wiki.interfaces import IWikiHistory
     >>> history = IWikiHistory(page)
     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1})]

Now we should get a valid response
     >>> view.loggedinmember.getId = lambda *a:'whatever'
     >>> response = view()

Test that we can create a page via wicked #@@ (put somewhere else??)
     >>> view = page.restrictedTraverse('@@add-page')
     >>> view
     <Products.Five.metaclass.NuiPageAdd object at ...>

     >>> request = self.portal.REQUEST 
     >>> request.form = {'Title' : 'newpage', 'section' : 'text'}
     >>> view()
     'http://...projects/p1/newpage/edit...'

Login as different users, each time checking the last modified author::
     >>> self.logout()
     >>> self.login('m1')
     >>> view = page.restrictedTraverse('@@edit')
     >>> view
     <Products.Five.metaclass.WikiEdit object at ...>

Now start changing the page::
     >>> request = view.request.form
     >>> request['text'] = u'<p>foo<br>\n\u2255baz</p>'.encode('utf-8')
     >>> request['title'] = 'bar'
     >>> view.handle_save()

Verify that version caching for ui has registered the changes::

     >>> history = IWikiHistory(page)
     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1}),
      (2,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 2})]

Verify the last modified author and text changes took place::
     >>> proj = self.portal.projects.p1
     >>> from opencore.interfaces.catalog import ILastModifiedAuthorId
     >>> ILastModifiedAuthorId(page)
     'm1'
     >>> ILastModifiedAuthorId(proj)
     'm1'

     >>> page.text.raw
     u'<p>foo<br>\n&#8789;baz</p>'

     >>> self.logout()
     >>> self.login('m3')
     >>> view = page.restrictedTraverse('@@edit')
     >>> request = view.request.form
     >>> request['text'] = 'bar'
     >>> view.handle_save()
     >>> ILastModifiedAuthorId(page)
     'm3'
     >>> ILastModifiedAuthorId(proj)
     'm3'

Check that when logging back in as m1, m3 is still the last modified author
     >>> self.login('m1')
     >>> ILastModifiedAuthorId(page)
     'm3'
     >>> ILastModifiedAuthorId(proj)
     'm3'

Let's try some reversions. First lets Verify that version caching for
ui has registered the changes.  We've made 4 edits and should have 4
versions w/ no comments (no blank initialization version)::

     >>> history = IWikiHistory(page)
     >>> len(history.annot)
     4

     >>> pprint(sorted(item for item in history.annot.items()))
     [(0,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 0}),
      (1,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 1}),
      (2,
       {'author': 'portal_owner',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 2}),
      (3,
       {'author': 'm1',
        'comment': '',
        'modification_date': DateTime(...),
        'version_id': 3})]





