-*- mode: doctest ;-*-

==========
 wiki add
==========

When pages are added, we need to make sure we don't make views
inaccessible

Identifying view names
======================

`get_view_names` provides some basic introspection of the views
available for an object (later, we'll probably include this into a
sort of name chooser ala z3)::

    >>> from opencore.nui.wiki import add
    >>> projects = self.portal.projects
    >>> names = list(add.get_view_names(projects.p1))
    >>> 'team' in names
    True

    >>> 'manage-team' in names
    True


Id choosing
===========

Currently, except for the managerial new interfaces, all adding is
done via wicked links.  To gain control over the naming, we will
override the wicked adder. Eventually, this should be replaced with a
proper add form::

    >>> self.login('m1')
    >>> from opencore.nui.wiki.add import NuiContainerAdd
    >>> view = NuiContainerAdd(projects.p1, projects.p1.REQUEST)
    >>> view.sanitize('team')
    'team-page'

    >>> view.add_content(title='Manage Team!', section='text')
    'http://nohost/plone/projects/p1/manage-team-page/edit'

    >>> view.get_container()
    <OpenProject at /plone/projects/p1>

    >>> getattr(view.get_container(), 'manage-team-page')
    <OpenPage at /plone/projects/p1/manage-team-page>

If we call the view directly before populating the request, we should
get an assertion error::

    >>> view.add_content()
    Traceback (most recent call last):
    ...
    AssertionError: Must have a title to create content
    
The works for pages ala wicked w/ a slightly altered container
methods. Eventually, all adds should be views on the container.  For
now we simple make parity with wicked::

    >>> new_page = getattr(view.get_container(), 'manage-team-page')
    >>> from opencore.nui.wiki.add import NuiPageAdd
    >>> view = NuiPageAdd(new_page, new_page.REQUEST)

    >>> view.add_content(title='Lists!', section='text')
    'http://nohost/plone/projects/p1/lists-page/edit'

`get_container` returns the project, not the page::

    >>> view.get_container()
    <OpenProject at /plone/projects/p1>

We are disrupting the natural resolutions wicked does on ids, so lets
make sure our new nonstandard id content gets cached (this would still
usually get picked up by a title match too, but caching is more
efficient)::
 
    >>> from wicked.interfaces import ICacheManager
    >>> from wicked import utils
    >>> from zope.component import getMultiAdapter
    >>> from opencore.nui.wiki.add import normalize
    >>> wicked = utils.getWicked(new_page.Schema()['text'], new_page)
    >>> cache = getMultiAdapter((wicked, new_page), ICacheManager)
    >>> new_page2 = getattr(view.get_container(), 'lists-page')
    >>> pprint(cache.get(normalize(new_page2.Title())))
    [{'icon': 'plone/document_icon.gif',
      'path': '/plone/projects/p1/lists-page',
      'uid': '...'}]

Got to copy over some tests from wicked/browser/add.txt since we're overriding the
wickedadd behavior; test that foreign characters don't explode and are properly
normalized::

    >>> title = u'Test G\u00e9omatique'.encode("utf-8")
    >>> self.folder.REQUEST.set('Title', title)
    >>> view = NuiContainerAdd(projects.p1, self.folder.REQUEST)
    >>> retadd = view.add_content()
    >>> print retadd
    http://nohost/plone/projects/p1/test-geomatique/edit
    >>> delattr(view, "_redirected")
    >>> view.portal_status_message
    [...u'"Test G&#233;omatique" has been created'...]

The window title should display properly, and the page should be renderable without
explosions::
    >>> view = projects.p1['test-geomatique'].restrictedTraverse('@@view')
    >>> view.window_title()
    u'Test G\xe9omatique - Project One - OpenCore Site'
    >>> view()
    u'...geomatique...'

    >>> title = u'\u3322'.encode("utf-8")
    >>> self.folder.REQUEST.set('Title', title)
    >>> view = NuiContainerAdd(projects.p1, self.folder.REQUEST)
    >>> retadd = view.add_content()
    >>> print retadd
    http://nohost/plone/projects/p1/%7E3322/edit
    >>> delattr(view, "_redirected")
    >>> view.portal_status_message
    [u'"&#13090;" has been created']

