=========================
opencore.nui.email_sender
=========================

Check that the basic aspects of sending email out are working properly

First, let's instantiate an email sender
    >>> from opencore.interfaces import IOpenSiteRoot
    >>> portal = self.portal
    >>> IOpenSiteRoot.providedBy(portal)
    True
    >>> from opencore.utility.interfaces import IEmailSender
    >>> es = IEmailSender(portal)
    >>> es
    <opencore.utility.email_sender.EmailSender object at ...>
    >>> mh = getToolByName(portal, 'MailHost')
    >>> mh
    <opencore.testing.utility.MailHostMock object at ...>

Check converting to email addresses
    >>> es._to_email_address('m1')
    'notreal1@example.com'
    >>> es._to_email_address('fooey@example.com')
    'fooey@example.com'
    >>> es._to_email_address('notreal1@example.com')
    'notreal1@example.com'
    >>> es._to_email_address('<foo@bar.com>')
    'foo@bar.com'
    >>> es._to_email_address(' <foo@bar.com> ')
    'foo@bar.com'
    >>> es._to_email_address('Joe <foo@bar.com>')
    'Joe <foo@bar.com>'
    >>> print es._to_email_address('nosuchmember')
    None

Check translation machinery::
    >>> from zope.i18nmessageid import Message
    >>> msg = Message("I am a ${adj} message", mapping=dict(adj="lovely"))
    >>> es._translate(msg)
    u'I am a lovely message'

Test the mail message construction, which really just translates a
previously constructed Message::
    >>> from opencore.i18n import _
    >>> mapping=dict(project_title="p1", member_id="lammy", 
    ...     team_manage_url="bloop", project_noun='banana')
    >>> msg = _(u"email_membership_requested", mapping=mapping)
    >>> es.constructMailMessage(msg)
    u'...p1...lammy...banana\'s...bloop...'

It should handle unicode in the mapping dict:
    >>> mapping['member_id'] = u'I like pi\xf1atas'
    >>> es.constructMailMessage(msg)
    u'...p1...I like pi\xf1atas...bloop...'

It should handle raw byte strings in the mapping too, because those
may come from raw user input:

    >>> mapping['member_id'] = 'I like pi\xc3\xb1atas'
    >>> es.constructMailMessage(msg)
    u'...p1...I like pi\xf1atas...bloop...'

Send some emails, and check that they went out
    >>> es.sendMail(
    ...     'lammy@example.com',
    ...     msg=u'unicode, hi there from ${pal}',
    ...     subject='testing',
    ...     mfrom='hammy@example.com',
    ...     pal='the hamster',
    ...     unused='whatever',
    ...     andsomething=u'unused unicode',
    ...     )
    >>> len(mh.messages)
    1
    >>> es.sendMail(
    ...     'bammy@example.com',
    ...     msg='hi there, no unicode',
    ...     subject='more testing',
    ...     mfrom='hammy@example.com',
    ...     )
    >>> len(mh.messages)
    2

This one contains both utf8-encoded byte strings (in the recipient and
subject) and unicode (in the sender and body)::

    >>> es.sendMail(
    ...     'Rolando Pe\xc3\xb1ate <fooey@example.com>',
    ...     msg=u'I do enjoy pi\xf1atas',
    ...     subject='more testing with pi\xc3\xb1atas',
    ...     mfrom=u'Gabriel Rold\xe1n <hammy@example.com>',
    ...     )
    >>> len(mh.messages)
    3
    >>> pprint(mh.messages[-1])
    {'mfrom': 'Gabriel =?utf-8?q?Rold=C3=A1n?= <hammy@example.com>',
     'msg': 'I do enjoy pi\xc3\xb1atas',
     'mto': ['Rolando =?utf-8?q?Pe=C3=B1ate?= <fooey@example.com>'],
     'subject': 'more testing with =?utf-8?q?pi=C3=B1atas?='}
