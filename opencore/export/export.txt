=========================
Exporting Project Content
=========================

An authorized user can export a project's content.

Let's try the back-end export utils directly:

    >>> proj = self.portal.projects.p2
    >>> from opencore.export import export_utils
    >>> from opencore.export.export_utils import ProjectExportQueueView
    >>> qview = ProjectExportQueueView(proj, proj.REQUEST)

We hack the output directory to avoid polluting the real export directory:

    >>> import tempfile
    >>> tempdir = tempfile.mkdtemp()
    >>> qview.vardir = tempdir

We can call export() directly:

    >>> path = qview.export(proj.getId())
    >>> path.startswith(qview.vardir)
    True
    >>> path
    '.../project_exports/p2/p2-....zip'

There should be a zipfile there:

    >>> import zipfile
    >>> zipfile.is_zipfile(path)
    True
  
Status objects
--------------

Status is reported via these boring little bags of state:

    >>> from opencore.export.export_utils import ExportStatus
    >>> status = ExportStatus('foo')
    >>> status.name
    'foo'
    >>> status.running
    False
    >>> status.succeeded
    False
    >>> status.hung
    False
    >>> status.failed
    False
    >>> status.start()
    >>> status.starttime
    datetime.datetime(...)
    >>> status.running
    True
    >>> status.updatetime == status.starttime
    True
    >>> status.finish('foo')
    >>> status.path
    'foo'
    >>> status.running
    False
    >>> status.updatetime > status.starttime
    True
    >>> status.succeeded
    True
    >>> status.fail()
    >>> status.succeeded
    False
    >>> status.failed
    True
    >>> status.updatetime > status.starttime
    True
    >>> # Simulate a hung job by forcing a really old start time.
    >>> import datetime
    >>> status.start()
    >>> status.starttime -= datetime.timedelta(days=10)
    >>> status.hung  
    True

There's exactly one status instance for a given id:

    >>> export_utils.get_status('qux') is export_utils.get_status('qux')
    True


The Export Queue
----------------

Since exports can take a long time, they are expected to run
asynchronously and are managed in a queue.  We can trigger an export
by putting a status object in the queue and then calling the view.

The queue starts empty:

    >>> queue = export_utils.get_queue()
    >>> queue
    <Queue.Queue instance at ...>
    >>> queue.empty()
    True
    >>> self._start_log_capture(subsystem='opencore.export')
    >>> qview.maxwait = 0  # turn off blocking timeout for tests.
    >>> qview.notify = False # turn off user email notification for tests too.
    >>> qview()  # nothing happens.
    []
    >>> print self.logged
    None


Here's an example of export failure due to missing project:

    >>> queue.put('no-such-project')
    >>> status = export_utils.get_status('no-such-project')
    >>> qview()
    []
    >>> status.failed
    True
    >>> len(self.logged) > 0
    True
    >>> self.logged.pop(0).msg
    'Failure in export of project \'no-such-project\'...'


And here's an example of success:

    >>> self.logged = None
    >>> status = export_utils.get_status(proj.getId())
    >>> queue.put(status.name)
    >>> qview()
    ['p2']
    >>> status.succeeded
    True
    >>> len(self.logged) > 0
    True
    >>> self.logged.pop().msg
    'Reached end of project export job queue (exported 1)'

Let's clean up the output directory to a known blank slate:

    >>> import shutil
    >>> shutil.rmtree(tempdir)
    >>> tempdir = tempfile.mkdtemp()
    >>> qview.vardir = tempdir


The export UI view
------------------

The export view is restricted:

    >>> proj = self.portal.projects.p2
    >>> self.logout()
    >>> proj.restrictedTraverse('export')
    Traceback (most recent call last):
    ...
    Unauthorized: ...
    >>> self.login('m3')
    >>> proj.restrictedTraverse('export')
    Traceback (most recent call last):
    ...
    Unauthorized: ...

Let's instantiate it directly now:

    >>> self.login('m1')
    >>> from opencore.export.export import ProjectExportView
    >>> export = ProjectExportView(proj, proj.REQUEST)
    >>> export.available_exports()
    []
    >>> export.vardir = qview.vardir

And try to fire off an export. It won't work with GET:

    >>> status = export.do_export()
    Traceback (most recent call last):
      ...
    Forbidden: only POST is allowed for this view

But it works with POST.
We get a json structure back:

    >>> proj.REQUEST.environ['REQUEST_METHOD'] = 'POST'
    >>> export.do_export()
    '{"progress": "", "state": "queued, waiting to start", "filename": null}'

We can check the current state of the export job:

    >>> status = export.current_status()
    >>> status.state == status.QUEUED
    True

If we call the queue handler, the export job will finish:

    >>> qview()
    ['p2']
    >>> status.succeeded
    True

We can get the path to the zipfile from the status object:

    >>> status.path
    '.../project_exports/p2/p2-....zip'
    >>> zipfile.is_zipfile(status.path)
    True
    >>> exported_files = sorted(zipfile.ZipFile(status.path, 'r').namelist())
    >>> from pprint import pprint
    >>> pprint([i for i in exported_files if '.bzr' not in i])
    ['p2/README.txt',
     'p2/lists/list1/archive.mbox',
     'p2/lists/list1/settings.ini',
     'p2/lists/list1/subscribers.csv',
     'p2/pages/img1',
     'p2/pages/new1.html',
     'p2/pages/new1/fa2',
     'p2/pages/project-home.html',
     'p2/pages/project-home/fa1',
     'p2/wiki_history/new1',
     'p2/wiki_history/project-home']
    >>> 'p2/wiki_history/.bzr/README' in exported_files
    True
    >>> len(export.available_exports())
    1
    >>> status.path.endswith(export.available_exports()[0])
    True

The export view provides a list of exported, downloadable zip files:

    >>> sorted(export.available_exports())
    ['p2-....zip']

And the same list as json:

    >>> export.available_exports_json()
    '["p2-....zip"]'


You can download the a zipfile by traversing the export view with the
zipfile's name:

    >>> zipname = export.available_exports()[-1]
    >>> export[zipname]
    <open FilestreamIterator '...project_exports/p2/p2-...zip' at ...>

What you actually get is an iterator. Let's make sure the data is a
working zip file:

    >>> import StringIO
    >>> output = StringIO.StringIO()
    >>> for bytes in export[zipname].read():
    ...     output.write(bytes)
    >>> z = zipfile.ZipFile(output, 'r')
    >>> sorted(z.namelist()) == exported_files
    True
    


Cleanup
-------

    >>> import shutil
    >>> shutil.rmtree(tempdir)  #XXX this should be done in teardown
   

