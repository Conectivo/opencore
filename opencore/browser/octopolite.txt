OctopoLite form handling.

OctopoLite provides a base class to be used with an @action decorator
to handle method dispatch based on request keys.

It also provides handling of some form conventions that allow views to
handle forms both synchronously (returning complete HTML to the
browser) and asynchronously (returning JSON for AJAX usage).

To use OctopoLite in a view::

 * bind a single view in ZCML with no attribute or template

 * extend BaseView and OctopoLite, eg


      class MyView(BaseView, OctopoLite):

 * specify a default dispatchable method for rendering the form, eg

          @action('render_form', default=True)
          def render_form(self, target=None, fields=None):
              return ZopeTwoPageTemplateFile('myform.pt')()

 * specify dispatchable methods for all of your form actions, eg

          @action('delete', apply=post_only())
          def handle_delete(self, target=None, fields=None):
              cmds = {}
              for oid in target:
                  del self.obj[oid]
                  cmds[oid] = {'action': 'delete'}
              return cmds

And that's about it! Note the required target, fields signature for
your action methods.
XXX TODO: what do 'target' and 'fields' mean?
XXX TODO: test case when method signature doesn't have target & fields

See bottom of this file for the syntax of the JSON object to be
returned to the client for AJAX requests.




   >>> from opencore.browser.formhandler import OctopoLite, action
   >>> class FormTest(OctopoLite):
   ...     
   ...     template = lambda self: 'my template'
   ...     request = type('request', (object,), dict(form={}, environ={'HTTP_REFERER': "http://nohost"}))
   ...     
   ...     @action('roklok', default=True)
   ...     def do_roklok(self, target=None, fields=None):
   ...         print "Rock!"
   ...         
   ...     @action('sod')
   ...     def do_sign_of_devil(self, target=None, fields=None):
   ...         print "eggs of the devil!"
   ...         return [i for i in target]   # XXX why's this here?
   ...     

   >>> view = FormTest()

The dispatcher is dumb as a rock. It dispatches based on the first
action it finds in the form, encoded in special format in the "task"
field::

   >>> view.request.form['task|dummy|sod'] = 'Foo'
   >>> view()
   eggs of the devil!
   'my template'

XXX TODO: explain the special format. What's 'dummy'?

The dispatch methods are loaded into a dictlike object::

   >>> pprint(view.actions)
   {'roklok': <....Action object at ...>,
    'sod': <....Action object at ...>}


We marked the 'roklok' action as the default action::

   >>> view.actions.default is view.actions['roklok']
   True

So if no action is specified, the roklok action is called::

   >>> view.request.form = {}
   >>> view()
   Rock!
   'my template'


Using Decorated Methods as Actions
==================================

The __name__ of the method decorated with @action is used in a getattr
to find the method to call. If you use additional decorators, the
outermost decorator before @action must ensure that the __name__ of
the function it returns is identical to that of the underlying method.

If your decorator doesn't do that, you'll get an AttributeError::

   >>> def dumb_decorator(func):
   ...     def inner(self, *args, **kw):
   ...         print "in dumb_decorator"
   ...         return func(self, *args, **kw)
   ...     return inner

   >>> class FormTest2(FormTest):
   ...     
   ...     @action('yes1')
   ...     @dumb_decorator
   ...     def broken(self, target=None, fields=None):
   ...         print "ok"

   >>> view = FormTest2()
   >>> view.request.form = {'task|dummy|yes1': True}
   >>> view()
   Traceback (most recent call last):
   ...
   AttributeError: 'FormTest2' object has no attribute 'inner'


It works if your decorator properly sets __name__::

   >>> def better(func):
   ...     def myinner(self, *args, **kw):
   ...         print "in better"
   ...         return func(self, *args, **kw)
   ...     myinner.__name__ = func.__name__
   ...     return myinner

   >>> class FormTest3(FormTest):
   ...     
   ...     @action('yes2')
   ...     @better
   ...     def working(self, target=None, fields=None):
   ...         print "working!"

   >>> view = FormTest3()
   >>> view.request.form = {'task|dummy|yes2': True}
   >>> view()
   in better
   working!
   'my template'

Alternatively you can pass a decorator or a tuple of decorators to
@action in the `apply' argument. These decorators will be applied to
the method before it is called on dispatch, and the decorators do not
have to worry about setting __name__.

   >>> class FormTest4(FormTest):
   ...     
   ...     @action('yes3', apply=(dumb_decorator, dumb_decorator))
   ...     def notbroken(self, target=None, fields=None):
   ...         print "fine!"
   ...         

   >>> view = FormTest4()
   >>> view.request.form = {'task|dummy|yes3': True}
   >>> view()
   in dumb_decorator
   in dumb_decorator
   fine!
   'my template'

In that case, your methods will be decorated *if and only if* they are
called by action dispatch; when called directly the methods will not
be decorated::

   >>> view.notbroken()
   fine!

And all methods still work as normal::

   >>> view.do_roklok()
   Rock!


Some Useful Decorators
======================

@post_only raises an exception if the request isn't a POST::


   >>> from opencore.browser.formhandler import post_only, anon_only
   >>> class FormTest5(FormTest):
   ...     
   ...     @action('post_only_test', apply=post_only())
   ...     def foo(self, *args, **kw):
   ...         print "ok from foo"
   ...     
   ...     @action('anon_only_test', apply=anon_only())
   ...     def bar(self, *args, **kw):
   ...         print "ok from bar"
   ...     
   ...     def redirect(self, url):  # satisy anon_only's requirements.
   ...         print "redirected to %r" % url
   ...         
   >>> view = FormTest5()
   >>> view.request.environ['REQUEST_METHOD'] = 'GET'
   >>> view.request.form = {'task|dummy|post_only_test': True}
   >>> view()
   Traceback (most recent call last):
   ...
   Forbidden: GET is not allowed here
   >>> view.request.environ['REQUEST_METHOD'] = 'POST'
   >>> view()
   ok from foo
   'my template'

@anon_only redirects if there's an authenticated user::

   >>> view.request.form = {'task|dummy|anon_only_test': True}
   >>> view.loggedin = True   # satisfy anon_only's requirements.
   >>> view.came_from = 'where i came from'  # ditto.
   >>> view()
   redirected to 'where i came from'
   'my template'
   >>> view.loggedin = False
   >>> view()
   ok from bar
   'my template'


Using OctopoLite with AJAX
===========================

Since the requests we've made were issued synchronously, Octopolite
swallowed the method's return value and returned a rendered
template. We can issue requests asynchronously to get back the return
value directly. To do that, add mode=async to the request::

   >>> view = FormTest()
   >>> view.request.form = {'mode': 'async', 'task|dummy|sod': 'Foo'}

Stub out response (will be set in BaseView when live)
   >>> class ResponseStub(object):
   ...     def setHeader(self, *a):
   ...         return None
   >>> view.response = ResponseStub()

   >>> view()
   eggs of the devil!
   '...dummy...'

A request with no actions will dispatch to the action specified as default::

   >>> view.request.form = {'mode': 'async'}
   >>> view()
   Rock!
   '...{}...'



Returning JSON from actions
============================

The JSON is for consumption by the opencore.js javascript library, so
it must conform to this format:

Return a dictionary whose KEYS are ids of existing DOM elements on the
page, and whose VALUES are a JSON object (with all fields optional):

class ActionInfo {
  string html;   # a string which can be evaluated as HTML and rendered 
                 # into DOM elements (quoted HTML or plain text)
  string effect; # a comma-separated string of JavaScript effects to apply
                 # to the element referred to in the id key, like fadeOut,
                 # highlight, or blink (we need to define a fixed set)
  string action; # a string indicating what action to take on the DOM element
                 # specified in the id key: replace, drop, append, prepend, copy
}

So a sample response might look like

{'msg_el': {'html': "Changes saved!", 'action': "copy", 'effect':"blink"},
 'obj_id': {'action': "delete"} }
