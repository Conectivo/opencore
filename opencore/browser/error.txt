-*- mode: doctest ;-*-

=========================================
Some basic tests for the site error views
=========================================

First we do some silly setup which should move to the test setup::
    >>> from opencore.browser.error import ErrorView
    >>> view = ErrorView(self.homepage, self.request)
    >>> view = view.__of__(self.homepage)

Now we've got the error view. It renders a different template based on
the error type. 404s will render a different template::
    >>> "not here" in view(error_type='NotFound')
    True
    >>> "Something unexpected" in view(error_type='SomethingElse')
    True

On a 404, we should search the results, and only get the expected portal types
in return::
    >>> self.request.URL = 'http://nohost/plone/m1'
    >>> view = ErrorView(self.portal, self.request)
    >>> results = view.suggestions()
    >>> len(results)
    1
    >>> results[0].getURL()
    'http://nohost/plone/people/m1/m1-home'

If the name guessed from the URL can't be searched in the catalog, we
should return no suggestions instead of raising an error:

    >>> self.request.URL = 'http://nohost/plone/and'
    >>> ErrorView(self.portal, self.request).suggestions()
    []
    >>> self.request.URL = 'http://nohost/plone/...'
    >>> ErrorView(self.portal, self.request).suggestions()
    []


On error, an email should get sent out.

Get the mailhost::

    >>> from zope.component import getUtility
    >>> from Products.MailHost.interfaces import IMailHost
    >>> mh = getUtility(IMailHost)
    >>> mh
    <...MailHostMock...at ...>
    >>> len(mh.messages)
    0

Simulate an error, and check that an email was sent out::

    >>> email_from_address = portal.manage_changeProperties(email_from_address='bogus@example.com')
    >>> from opencore.browser.error import ErrorReporter
    >>> view = ErrorReporter(self.homepage, self.request)
    >>> view = view.__of__(self.homepage)
    >>> view.request.form.update({'error_submitted': 'Send',
    ...                           'oc-did': 'what i did',
    ...                           'oc-expected': 'what i expected',
    ...                           'time': '2000-01-01 01:02:03.123456',
    ...                           'url': 'http://nohost/plone/error/url',
    ...                           'traceback': 'here is the traceback'})
    >>> html = view()
    >>> len(mh.messages)
    1

Verify the contents of the email::

    >>> msg = mh.messages[0]
    >>> from pprint import pprint
    >>> items = msg.items()
    >>> items.sort()
    >>> pprint(items)
    [('mfrom', 'anonymous@nohost'),
     ('msg',
      'On 2000-01-01 01:02:03.123456, anonymous@nohost went to the URL http://nohost/plone/error/url.\n\nDid: what i did\n\nExpected: what i expected\n\nTraceback: here is the traceback'),
     ('mto', ['bogus@example.com']),
     ('subject', '[OpenCore Site] site error report')]


SupervisorErrorListener integration
===================================

When an error is hit, we write to stdout some stuff formatted
for supervisor to consume. First some request setup::

    >>> self.request.form.clear()
    >>> self.request.environ['REQUEST_METHOD'] = 'GET'
    >>> self.request.form.update({'hello': 'errorworld'})
    >>> view = ErrorView(self.homepage, self.request).__of__(self.homepage)

Normally you don't see anything:

    >>> html = view(error_tb="traceback would go here", error_type='kaboom')

But if you set the right environment variable, you get formatted info
on stdout::

    >>> os.environ['SUPERVISOR_ENABLED'] = 'yup'
    >>> error = view(error_tb="traceback would go here", error_type='kaboom')
    <!--XSUPERVISOR:BEGIN-->
    Content-Type: text/plain
    Username: anonymous
    Request-url: http://nohost
    Method: GET
    <BLANKLINE>
    Environment: {'REQUEST_METHOD': 'GET', 'SERVER_NAME': 'nohost', 'SERVER_PORT': '80'}
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    Traceback: traceback would go here
    <!--XSUPERVISOR:END-->


If the request method is POST, you also get the form arguments::


    >>> self.request.environ['REQUEST_METHOD'] = 'POST'
    >>> error = view(error_tb="traceback would go here", error_type='kaboom')
    <!--XSUPERVISOR:BEGIN-->
    ...
    Method: POST
    <BLANKLINE>
    Environment: {'REQUEST_METHOD': 'POST', 'SERVER_NAME': 'nohost', 'SERVER_PORT': '80'}
    <BLANKLINE>
    POST arguments: {'hello': 'errorworld'}
    ...


If the error type is NotFound, we ignore it::

    >>> error = view(error_tb="whatever", error_type='NotFound')
